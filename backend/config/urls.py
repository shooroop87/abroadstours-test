# backend/config/urls.py - –û–¢–õ–ê–î–û–ß–ù–ê–Ø –í–ï–†–°–ò–Ø
from django.contrib import admin
from django.conf import settings
from django.conf.urls.i18n import i18n_patterns
from django.contrib.sitemaps.views import sitemap
from django.http import HttpResponse, FileResponse, Http404
from django.urls import include, path, re_path
from django.views.decorators.http import require_GET
from django.views.i18n import set_language
import os

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ core –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
from core.sitemaps import CompleteSitemap
from core.views import subscribe_to_newsletter

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –±–ª–æ–≥–∞ (–µ—Å–ª–∏ sitemaps –∏ feeds —É–∂–µ —Å–æ–∑–¥–∞–Ω—ã)
try:
    from blog.sitemaps import BlogPostSitemap, CategorySitemap
    from blog.feeds import BlogFeed, AtomBlogFeed
    BLOG_AVAILABLE = True
except ImportError:
    BLOG_AVAILABLE = False

# --- Sitemap config ---
sitemaps = {
    "complete": CompleteSitemap,
}

if BLOG_AVAILABLE:
    sitemaps.update({
        "blog_posts": BlogPostSitemap,
        "blog_categories": CategorySitemap,
    })

# –ü—Ä—è–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –º–µ–¥–∏–∞
def serve_media_debug(request, path):
    """–û—Ç–ª–∞–¥–æ—á–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤"""
    file_path = os.path.join(settings.MEDIA_ROOT, path)
    print(f"üêõ MEDIA REQUEST: {request.method} {path}")
    print(f"üêõ FULL PATH: {file_path}")
    print(f"üêõ EXISTS: {os.path.exists(file_path)}")
    print(f"üêõ IS FILE: {os.path.isfile(file_path) if os.path.exists(file_path) else 'N/A'}")
    
    if os.path.exists(file_path) and os.path.isfile(file_path):
        print(f"üêõ SERVING FILE: {file_path}")
        try:
            response = FileResponse(open(file_path, 'rb'))
            print(f"üêõ RESPONSE CREATED: {response}")
            return response
        except Exception as e:
            print(f"üêõ ERROR SERVING FILE: {e}")
            raise Http404(f"–û—à–∏–±–∫–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
    else:
        print(f"üêõ FILE NOT FOUND: {file_path}")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        dir_path = os.path.dirname(file_path)
        if os.path.exists(dir_path):
            files = os.listdir(dir_path)
            print(f"üêõ DIR CONTENTS: {files}")
        raise Http404("–ú–µ–¥–∏–∞ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

# --- robots.txt ---
@require_GET
def robots_txt(request):
    lines = [
        "User-agent: *",
        "Allow: /",
        "",
        f"Sitemap: https://{request.get_host()}/sitemap.xml",
    ]
    if BLOG_AVAILABLE:
        lines.extend([
            "",
            "# Blog RSS feeds",
            f"# RSS: https://{request.get_host()}/blog/feed/",
            f"# Atom: https://{request.get_host()}/blog/feed/atom/",
        ])
    return HttpResponse("\n".join(lines), content_type="text/plain")

# --- URLs –±–µ–∑ —è–∑—ã–∫–æ–≤–æ–≥–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞ ---
urlpatterns = [
    # –ü–ï–†–í–´–ú –¥–µ–ª–æ–º - –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã (–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û!)
    re_path(r'^media/(?P<path>.*)$', serve_media_debug, name='debug_media'),
    
    path("robots.txt", robots_txt, name="robots_txt"),
    path("sitemap.xml", sitemap, {"sitemaps": sitemaps}, name="sitemap"),
    path("set-language/", set_language, name="set_language"),
    path("subscribe/", subscribe_to_newsletter, name="subscribe"),
    
    # Django admin
    path("admin/", admin.site.urls),
    
    # CKEditor
    path("ckeditor/", include("ckeditor_uploader.urls")),
]

# –î–æ–±–∞–≤–ª—è–µ–º RSS feeds –¥–ª—è –±–ª–æ–≥–∞ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
if BLOG_AVAILABLE:
    urlpatterns.extend([
        path("blog/feed/", BlogFeed(), name="blog_feed"),
        path("blog/feed/atom/", AtomBlogFeed(), name="blog_feed_atom"),
    ])

# --- –Ø–∑—ã–∫–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã ---
urlpatterns += i18n_patterns(
    # Blog –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º –¥–ª—è /blog/ URL-–æ–≤
    path("blog/", include("blog.urls")),
    
    # Core –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ - –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ URL-—ã –≤–∫–ª—é—á–∞—è –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    path("", include("core.urls")),
    
    prefix_default_language=False,
)

# === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û –í DEBUG –†–ï–ñ–ò–ú–ï ===
if settings.DEBUG:
    print("üêõ DEBUG: –î–æ–±–∞–≤–ª—è–µ–º django_browser_reload...")
    
    # Django browser reload (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
    if 'django_browser_reload' in settings.INSTALLED_APPS:
        urlpatterns += [
            path("__reload__/", include("django_browser_reload.urls")),
        ]
    
    # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: static —Ñ–∞–π–ª—ã
    from django.conf.urls.static import static
    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)

print(f"üêõ DEBUG: –ò—Ç–æ–≥–æ URL patterns: {len(urlpatterns)}")
print("üêõ DEBUG: –ú–µ–¥–∏–∞ —Ñ–∞–π–ª—ã –æ–±—Å–ª—É–∂–∏–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ serve_media_debug")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ (–≤ core –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏)
handler404 = "core.views.custom_404"
handler500 = "core.views.custom_500"
