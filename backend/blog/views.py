# blog/views.py
import logging
import os
from django.views.generic import ListView, DetailView
from django.shortcuts import get_object_or_404
from django.http import Http404
from django.utils.translation import get_language
from django.core.paginator import Paginator
from django.conf import settings
from .models import BlogPost, Category

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger('blog')


class BlogListView(ListView):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç–∞—Ç–µ–π –±–ª–æ–≥–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    model = BlogPost
    template_name = 'blog/blog_list.html'
    context_object_name = 'posts'
    paginate_by = 9
    
    def get_queryset(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏"""
        logger.info("üìÑ –ü–æ–ª—É—á–∞–µ–º queryset –¥–ª—è —Å–ø–∏—Å–∫–∞ –±–ª–æ–≥–∞")
        
        queryset = BlogPost.objects.filter(
            status='published'
        ).select_related('author', 'category').prefetch_related('tags').order_by('-published_at')
        
        total_posts = queryset.count()
        logger.info(f"üìÑ –ù–∞–π–¥–µ–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {total_posts}")
        
        return queryset
    
    def get_context_data(self, **kwargs):
        """–î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        logger.info("üîß –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è BlogListView")
        
        context = super().get_context_data(**kwargs)
        posts = context.get('posts', [])
        
        logger.info(f"üìÑ –û—Ç–æ–±—Ä–∞–∂–∞–µ–º {len(posts)} –ø–æ—Å—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞
        for i, post in enumerate(posts, 1):
            logger.info(f"üìù –ü–æ—Å—Ç {i}: ID={post.id}, Title='{post.get_display_title()}'")
            logger.info(f"   Status: {post.status}")
            logger.info(f"   Author: {post.author.username}")
            logger.info(f"   Published: {post.published_at}")
            
            # –ü–æ–¥—Ä–æ–±–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if post.featured_image:
                logger.info(f"üñºÔ∏è –ü–æ—Å—Ç {i} - –µ—Å—Ç—å featured_image:")
                logger.info(f"   Name: {post.featured_image.name}")
                logger.info(f"   URL: {post.featured_image.url}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                try:
                    image_path = post.featured_image.path
                    logger.info(f"   Path: {image_path}")
                    
                    if os.path.exists(image_path):
                        file_size = os.path.getsize(image_path)
                        logger.info(f"   ‚úÖ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ä–∞–∑–º–µ—Ä: {file_size} bytes")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
                        readable = os.access(image_path, os.R_OK)
                        logger.info(f"   üîí –î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è: {readable}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        try:
                            from PIL import Image
                            with Image.open(image_path) as img:
                                logger.info(f"   üñºÔ∏è –†–∞–∑–º–µ—Ä—ã: {img.width}x{img.height}, —Ñ–æ—Ä–º–∞—Ç: {img.format}")
                        except Exception as img_e:
                            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {img_e}")
                    else:
                        logger.error(f"   ‚ùå –§–∞–π–ª –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {image_path}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                        dir_path = os.path.dirname(image_path)
                        if os.path.exists(dir_path):
                            logger.info(f"   üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {dir_path}")
                            dir_contents = os.listdir(dir_path)
                            logger.info(f"   üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {dir_contents}")
                        else:
                            logger.error(f"   üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {dir_path}")
                            
                except Exception as e:
                    logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—É—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            else:
                logger.warning(f"‚ùå –ü–æ—Å—Ç {i} - –ù–ï–¢ featured_image")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            if post.category:
                category_name = post.category.safe_translation_getter('name', any_language=True)
                logger.info(f"   üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}")
            else:
                logger.warning(f"   üìÇ –ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context['page_title'] = 'Blog - Abroads Tours'
        context['page_description'] = 'Travel tips, destination guides, and travel inspiration from Abroads Tours.'
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ–¥–∏–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        context['debug_info'] = {
            'media_url': settings.MEDIA_URL,
            'media_root': settings.MEDIA_ROOT,
            'debug': settings.DEBUG,
            'total_posts': len(posts),
        }
        
        logger.info(f"üîß –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        logger.info(f"‚öôÔ∏è MEDIA_URL: {settings.MEDIA_URL}")
        logger.info(f"‚öôÔ∏è MEDIA_ROOT: {settings.MEDIA_ROOT}")
        logger.info(f"‚öôÔ∏è DEBUG: {settings.DEBUG}")
        
        return context


class BlogDetailView(DetailView):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞—Ç—å–∏ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    model = BlogPost
    template_name = 'blog/post_detail.html'
    context_object_name = 'post'
    slug_field = 'translations__slug'
    slug_url_kwarg = 'slug'
    
    def get_queryset(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏"""
        logger.info("üìÑ –ü–æ–ª—É—á–∞–µ–º queryset –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        
        queryset = BlogPost.objects.filter(
            status='published'
        ).select_related('author', 'category').prefetch_related('tags')
        
        logger.info(f"üìÑ Queryset –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {queryset.count()} –ø–æ—Å—Ç–æ–≤")
        return queryset
    
    def get_object(self, queryset=None):
        """–ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π –ø–µ—Ä–µ–≤–æ–¥–æ–≤"""
        logger.info("üîç –ü–æ–∏—Å–∫ –ø–æ—Å—Ç–∞ –ø–æ slug")
        
        if queryset is None:
            queryset = self.get_queryset()
        
        slug = self.kwargs.get(self.slug_url_kwarg)
        logger.info(f"üîç –ò—â–µ–º –ø–æ—Å—Ç —Å slug: '{slug}'")
        
        if slug is None:
            logger.error("‚ùå Slug –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
            raise Http404("No slug provided")
        
        try:
            # –ò—â–µ–º –ø–æ—Å—Ç –ø–æ slug –≤ –ø–µ—Ä–µ–≤–æ–¥–∞—Ö
            obj = queryset.get(translations__slug=slug)
            logger.info(f"‚úÖ –ü–æ—Å—Ç –Ω–∞–π–¥–µ–Ω: ID={obj.id}, Title='{obj.get_display_title()}'")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if obj.featured_image:
                logger.info(f"üñºÔ∏è –£ –ø–æ—Å—Ç–∞ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {obj.featured_image.url}")
                
                if os.path.exists(obj.featured_image.path):
                    logger.info(f"‚úÖ –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                else:
                    logger.error(f"‚ùå –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {obj.featured_image.path}")
            else:
                logger.warning("‚ö†Ô∏è –£ –ø–æ—Å—Ç–∞ –Ω–µ—Ç featured_image")
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
            logger.info("üëÅÔ∏è –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤")
            obj.increment_views()
            
            return obj
            
        except BlogPost.DoesNotExist:
            logger.error(f"‚ùå –ü–æ—Å—Ç —Å slug '{slug}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            raise Http404("Blog post not found")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ—Å—Ç–∞: {e}")
            raise
    
    def get_context_data(self, **kwargs):
        """–§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        logger.info("üîß –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        
        context = super().get_context_data(**kwargs)
        post = self.get_object()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º helper –º–µ—Ç–æ–¥—ã –º–æ–¥–µ–ª–∏
        context['page_title'] = post.get_display_meta_title()
        context['page_description'] = post.get_display_meta_description()
        
        logger.info(f"üìÑ Meta title: '{context['page_title']}'")
        logger.info(f"üìÑ Meta description: '{context['page_description']}'")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
        logger.info("üîó –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏")
        related_posts = post.get_related_posts(limit=3)
        context['related_posts'] = related_posts
        logger.info(f"üîó –ù–∞–π–¥–µ–Ω–æ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π: {len(related_posts)}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∏ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç–∞—Ç—å–∏
        logger.info("‚¨ÖÔ∏è‚û°Ô∏è –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ —Å—Ç–∞—Ç—å–∏")
        context['next_post'] = post.get_next_post()
        context['previous_post'] = post.get_previous_post()
        
        if context['next_post']:
            logger.info(f"‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç–∞—Ç—å—è: {context['next_post'].get_display_title()}")
        if context['previous_post']:
            logger.info(f"‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç–∞—Ç—å—è: {context['previous_post'].get_display_title()}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (—Ç–æ–ª—å–∫–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ)
        logger.info("üí¨ –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏")
        comments = post.comments.filter(is_approved=True).order_by('-created_at')
        context['comments'] = comments
        logger.info(f"üí¨ –ù–∞–π–¥–µ–Ω–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {comments.count()}")
        
        logger.info("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω")
        return context


class CategoryView(ListView):
    """–°—Ç–∞—Ç—å–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    model = BlogPost
    template_name = 'blog/category.html'
    context_object_name = 'posts'
    paginate_by = 9
    
    def get_queryset(self):
        """–ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—å–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        category_slug = self.kwargs['slug']
        logger.info(f"üìÇ –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—å–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: '{category_slug}'")
        
        self.category = get_object_or_404(
            Category, 
            translations__slug=category_slug,
            is_active=True
        )
        
        category_name = self.category.safe_translation_getter('name', any_language=True)
        logger.info(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–∞–π–¥–µ–Ω–∞: '{category_name}' (ID={self.category.id})")
        
        queryset = BlogPost.objects.filter(
            category=self.category,
            status='published'
        ).select_related('author', 'category').prefetch_related('tags').order_by('-published_at')
        
        total_posts = queryset.count()
        logger.info(f"üìÑ –°—Ç–∞—Ç–µ–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {total_posts}")
        
        return queryset
    
    def get_context_data(self, **kwargs):
        """–§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        logger.info("üîß –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è CategoryView")
        
        context = super().get_context_data(**kwargs)
        context['category'] = self.category
        
        category_name = self.category.safe_translation_getter('name', any_language=True)
        context['page_title'] = f"{category_name} - Blog"
        context['page_description'] = (
            self.category.safe_translation_getter('description', any_language=True) or 
            f"Articles in {category_name} category"
        )
        
        logger.info(f"üìÇ –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_name}")
        return context


class TagView(ListView):
    """–°—Ç–∞—Ç—å–∏ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Ç–µ–≥–æ–º —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    model = BlogPost
    template_name = 'blog/tag.html'
    context_object_name = 'posts'
    paginate_by = 9
    
    def get_queryset(self):
        """–ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—å–∏ –ø–æ —Ç–µ–≥—É"""
        self.tag_slug = self.kwargs['slug']
        logger.info(f"üè∑Ô∏è –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—å–∏ –¥–ª—è —Ç–µ–≥–∞: '{self.tag_slug}'")
        
        queryset = BlogPost.objects.filter(
            tags__slug=self.tag_slug,
            status='published'
        ).select_related('author', 'category').prefetch_related('tags').order_by('-published_at')
        
        total_posts = queryset.count()
        logger.info(f"üìÑ –°—Ç–∞—Ç–µ–π —Å —Ç–µ–≥–æ–º '{self.tag_slug}': {total_posts}")
        
        return queryset
    
    def get_context_data(self, **kwargs):
        """–§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ–≥–∞"""
        logger.info("üîß –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è TagView")
        
        context = super().get_context_data(**kwargs)
        context['tag_slug'] = self.tag_slug
        context['page_title'] = f"#{self.tag_slug} - Blog"
        context['page_description'] = f"Articles tagged with {self.tag_slug}"
        
        logger.info(f"üè∑Ô∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–≥–∞: {self.tag_slug}")
        return context


class SearchView(ListView):
    """–ü–æ–∏—Å–∫ –ø–æ —Å—Ç–∞—Ç—å—è–º —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    model = BlogPost
    template_name = 'blog/search.html'
    context_object_name = 'posts'
    paginate_by = 9
    
    def get_queryset(self):
        """–ü–æ–∏—Å–∫ —Å—Ç–∞—Ç–µ–π"""
        query = self.request.GET.get('q', '')
        logger.info(f"üîç –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}'")
        
        if query:
            queryset = BlogPost.objects.filter(
                translations__title__icontains=query,
                status='published'
            ).select_related('author', 'category').prefetch_related('tags').order_by('-published_at')
            
            total_results = queryset.count()
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {total_results}")
            
            return queryset
        else:
            logger.info("üîç –ü—É—Å—Ç–æ–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
            return BlogPost.objects.none()
    
    def get_context_data(self, **kwargs):
        """–§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞"""
        logger.info("üîß –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è SearchView")
        
        context = super().get_context_data(**kwargs)
        query = self.request.GET.get('q', '')
        
        context['query'] = query
        context['page_title'] = f"Search results for '{query}'" if query else "Search"
        context['page_description'] = f"Search results for {query}" if query else "Search our blog"
        
        results_count = len(context.get('posts', []))
        logger.info(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {results_count}")
        
        return context


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
def debug_media_files(request):
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è view –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤"""
    if not settings.DEBUG:
        raise Http404("Debug mode only")
    
    logger.info("üêõ –û—Ç–ª–∞–¥–∫–∞ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤")
    
    posts = BlogPost.objects.filter(status='published')
    
    debug_info = {
        'settings': {
            'MEDIA_URL': settings.MEDIA_URL,
            'MEDIA_ROOT': settings.MEDIA_ROOT,
            'DEBUG': settings.DEBUG,
        },
        'posts': [],
        'media_root_exists': os.path.exists(settings.MEDIA_ROOT),
        'media_root_writable': os.access(settings.MEDIA_ROOT, os.W_OK) if os.path.exists(settings.MEDIA_ROOT) else False,
    }
    
    for post in posts:
        post_info = {
            'id': post.id,
            'title': post.get_display_title(),
            'has_image': bool(post.featured_image),
        }
        
        if post.featured_image:
            post_info.update({
                'image_name': post.featured_image.name,
                'image_url': post.featured_image.url,
                'image_path': post.featured_image.path,
                'file_exists': os.path.exists(post.featured_image.path),
                'file_size': os.path.getsize(post.featured_image.path) if os.path.exists(post.featured_image.path) else None,
            })
        
        debug_info['posts'].append(post_info)
        logger.info(f"üêõ –ü–æ—Å—Ç {post.id}: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ={bool(post.featured_image)}")
    
    from django.http import JsonResponse
    return JsonResponse(debug_info, indent=2)
