# backend/blog/models.py
import logging
import os
import re
import traceback

from django.db import models
from django.urls import reverse
from django.utils import timezone
from django.utils.text import slugify
from django.contrib.auth.models import User
from ckeditor_uploader.fields import RichTextUploadingField
from easy_thumbnails.fields import ThumbnailerImageField
from parler.models import TranslatableModel, TranslatedFields
from taggit.managers import TaggableManager
from PIL import Image

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger('blog.models')


class Category(TranslatableModel):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–ª–æ–≥–∞ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏"""
    translations = TranslatedFields(
        name=models.CharField(max_length=100, verbose_name="Name"),
        description=models.TextField(blank=True, verbose_name="Description"),
        slug=models.SlugField(max_length=120, unique=True, verbose_name="URL Slug"),
    )
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    is_active = models.BooleanField(default=True, verbose_name="Active")
    
    class Meta:
        verbose_name = "Category"
        verbose_name_plural = "Categories"
        ordering = ['translations__name']
    
    def __str__(self):
        return self.safe_translation_getter('name', any_language=True) or f"Category {self.pk}"
    
    def get_absolute_url(self):
        slug = self.safe_translation_getter('slug', any_language=True)
        if slug:
            return reverse('blog:category', kwargs={'slug': slug})
        return '#'
    
    def save(self, *args, **kwargs):
        logger.info(f"üìÅ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é ID={self.pk}")
        
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç
        super().save(*args, **kwargs)
        logger.info(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, ID={self.pk}")
        
        # –ü–æ—Ç–æ–º —Ä–∞–±–æ—Ç–∞–µ–º —Å –ø–µ—Ä–µ–≤–æ–¥–∏–º—ã–º–∏ –ø–æ–ª—è–º–∏
        if hasattr(self, 'name') and self.name and not self.safe_translation_getter('slug'):
            self.slug = slugify(self.name)
            logger.info(f"üîó –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω slug –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {self.slug}")
            super().save(*args, **kwargs)


class BlogPost(TranslatableModel):
    """–ú–æ–¥–µ–ª—å —Å—Ç–∞—Ç—å–∏ –±–ª–æ–≥–∞ —Å SEO –∏ –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏"""
    
    STATUS_CHOICES = [
        ('draft', 'Draft'),
        ('published', 'Published'),
        ('scheduled', 'Scheduled'),
    ]
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è (–Ω–µ –ø–µ—Ä–µ–≤–æ–¥—è—Ç—Å—è)
    author = models.ForeignKey(User, on_delete=models.CASCADE, related_name='blog_posts')
    category = models.ForeignKey(Category, on_delete=models.SET_NULL, null=True, blank=True)
    status = models.CharField(max_length=10, choices=STATUS_CHOICES, default='draft')
    featured_image = ThumbnailerImageField(
        upload_to='blog/featured/', 
        blank=True, null=True,
        help_text="Recommended size: 1200x630px for social media"
    )
    
    # –î–∞—Ç—ã
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    published_at = models.DateTimeField(default=timezone.now)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    is_featured = models.BooleanField(default=False, verbose_name="Featured Post")
    allow_comments = models.BooleanField(default=True)
    views_count = models.PositiveIntegerField(default=0)
    reading_time = models.PositiveIntegerField(default=5, help_text="Reading time in minutes")
    
    # –¢–µ–≥–∏
    tags = TaggableManager(blank=True)
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º—ã–µ –ø–æ–ª—è
    translations = TranslatedFields(
        title=models.CharField(max_length=200, verbose_name="Title"),
        slug=models.SlugField(max_length=250, unique=True, verbose_name="URL Slug"),
        excerpt=models.TextField(
            max_length=300, 
            blank=True,
            help_text="Short description for previews and social media"
        ),
        content=RichTextUploadingField(verbose_name="Content"),
        
        # SEO –ø–æ–ª—è
        meta_title=models.CharField(
            max_length=60, 
            blank=True,
            help_text="SEO title (max 60 chars). Leave blank to use post title."
        ),
        meta_description=models.CharField(
            max_length=160, 
            blank=True,
            help_text="Meta description for search engines (max 160 chars)"
        ),
        meta_keywords=models.CharField(
            max_length=255, 
            blank=True,
            help_text="SEO keywords, separated by commas"
        ),
        
        # Open Graph
        og_title=models.CharField(
            max_length=95, 
            blank=True,
            help_text="Open Graph title for social media (max 95 chars)"
        ),
        og_description=models.CharField(
            max_length=200, 
            blank=True,
            help_text="Open Graph description for social media (max 200 chars)"
        ),
        
        # Schema.org structured data
        schema_article_type=models.CharField(
            max_length=50,
            default='Article',
            choices=[
                ('Article', 'Article'),
                ('BlogPosting', 'Blog Posting'),
                ('NewsArticle', 'News Article'),
                ('TravelGuide', 'Travel Guide'),
            ],
            help_text="Schema.org article type"
        ),
    )
    
    class Meta:
        verbose_name = "Blog Post"
        verbose_name_plural = "Blog Posts"
        ordering = ['-published_at']
        indexes = [
            models.Index(fields=['-published_at', 'status']),
            models.Index(fields=['status', 'is_featured']),
        ]
    
    def __str__(self):
        return self.safe_translation_getter('title', any_language=True) or f"Post {self.pk}"
    
    def get_absolute_url(self):
        """–ü–æ–ª—É—á–∞–µ–º URL —Å—Ç–∞—Ç—å–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π –ø–µ—Ä–µ–≤–æ–¥–æ–≤"""
        slug = self.safe_translation_getter('slug', any_language=True)
        if slug:
            return reverse('blog:post_detail', kwargs={'slug': slug})
        return '#'
    
    def save(self, *args, **kwargs):
        logger.info(f"üìù ===== –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ ID={self.pk} =====")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –î–û —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        if self.featured_image:
            logger.info(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–æ–ª–µ featured_image: {self.featured_image.name}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞
            logger.info(f"üñºÔ∏è –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {type(self.featured_image)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
            try:
                size = self.featured_image.size
                logger.info(f"üìè –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {size} bytes")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            if hasattr(self.featured_image, 'path'):
                try:
                    image_path = self.featured_image.path
                    logger.info(f"üìÅ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: {image_path}")
                    
                    if os.path.exists(image_path):
                        file_size = os.path.getsize(image_path)
                        logger.info(f"‚úÖ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, —Ä–∞–∑–º–µ—Ä: {file_size} bytes")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
                        logger.info(f"üîí –ü—Ä–∞–≤–∞ –Ω–∞ —Ñ–∞–π–ª: {oct(os.stat(image_path).st_mode)[-3:]}")
                        logger.info(f"üîí –î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è: {os.access(image_path, os.R_OK)}")
                    else:
                        logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {image_path}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                        dir_path = os.path.dirname(image_path)
                        logger.info(f"üìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {dir_path}")
                        logger.info(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(dir_path)}")
                        if os.path.exists(dir_path):
                            logger.info(f"üìÅ –ü—Ä–∞–≤–∞ –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {oct(os.stat(dir_path).st_mode)[-3:]}")
                            logger.info(f"üìÅ –î–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏: {os.access(dir_path, os.W_OK)}")
                        else:
                            logger.error(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {dir_path}")
                            
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—É—Ç–∏ —Ñ–∞–π–ª–∞: {e}")
                    logger.error(f"üìã Traceback: {traceback.format_exc()}")
            else:
                logger.info(f"üìÅ –£ –æ–±—ä–µ–∫—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ 'path'")
                
        else:
            logger.info("‚ùå –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–æ–ª–µ featured_image")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Django
        from django.conf import settings
        logger.info(f"‚öôÔ∏è MEDIA_ROOT: {settings.MEDIA_ROOT}")
        logger.info(f"‚öôÔ∏è MEDIA_URL: {settings.MEDIA_URL}")
        logger.info(f"‚öôÔ∏è DEBUG: {settings.DEBUG}")
        
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å pk
        is_new = self.pk is None
        logger.info(f"üÜï –ù–æ–≤—ã–π –æ–±—ä–µ–∫—Ç: {is_new}")
        
        try:
            logger.info("üíæ –í—ã–∑—ã–≤–∞–µ–º super().save()...")
            super().save(*args, **kwargs)
            logger.info(f"‚úÖ –û–±—ä–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ, ID={self.pk}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞: {e}")
            logger.error(f"üìã Traceback: {traceback.format_exc()}")
            raise
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ü–û–°–õ–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        if self.featured_image:
            logger.info(f"üñºÔ∏è –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
            logger.info(f"üñºÔ∏è –ò–º—è —Ñ–∞–π–ª–∞: {self.featured_image.name}")
            logger.info(f"üñºÔ∏è URL: {self.featured_image.url}")
            
            if hasattr(self.featured_image, 'path'):
                try:
                    full_path = self.featured_image.path
                    logger.info(f"üñºÔ∏è –ü–æ–ª–Ω—ã–π –ø—É—Ç—å: {full_path}")
                    
                    if os.path.exists(full_path):
                        file_size = os.path.getsize(full_path)
                        logger.info(f"‚úÖ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
                        logger.info(f"üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–∞ –¥–∏—Å–∫–µ: {file_size} bytes")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
                        logger.info(f"üîí –ü—Ä–∞–≤–∞ –Ω–∞ —Ñ–∞–π–ª: {oct(os.stat(full_path).st_mode)[-3:]}")
                        logger.info(f"üîí –î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è: {os.access(full_path, os.R_OK)}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        try:
                            with Image.open(full_path) as img:
                                logger.info(f"üñºÔ∏è –†–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {img.width}x{img.height}")
                                logger.info(f"üñºÔ∏è –†–µ–∂–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {img.mode}")
                                logger.info(f"üñºÔ∏è –§–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {img.format}")
                        except Exception as img_e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {img_e}")
                            
                    else:
                        logger.error(f"‚ùå –§–ê–ô–õ –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {full_path}")
                        
                        # –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                        dir_path = os.path.dirname(full_path)
                        logger.info(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_path}")
                        logger.info(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(dir_path)}")
                        
                        if os.path.exists(dir_path):
                            logger.info(f"üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {os.listdir(dir_path)}")
                            logger.info(f"üìÅ –ü—Ä–∞–≤–∞ –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {oct(os.stat(dir_path).st_mode)[-3:]}")
                            logger.info(f"üìÅ –î–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏: {os.access(dir_path, os.W_OK)}")
                        else:
                            logger.error(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {dir_path}")
                            
                            # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                            try:
                                os.makedirs(dir_path, mode=0o755, exist_ok=True)
                                logger.info(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞: {dir_path}")
                            except Exception as dir_e:
                                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {dir_e}")
                        
                        # –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                        parent_paths = []
                        current_path = dir_path
                        while current_path != os.path.dirname(current_path):
                            parent_paths.append(current_path)
                            current_path = os.path.dirname(current_path)
                        
                        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:")
                        for path in reversed(parent_paths):
                            exists = os.path.exists(path)
                            writable = os.access(path, os.W_OK) if exists else "N/A"
                            logger.info(f"   {path}: exists={exists}, writable={writable}")
                            
                except Exception as path_e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ø—É—Ç–µ–º —Ñ–∞–π–ª–∞: {path_e}")
                    logger.error(f"üìã Traceback: {traceback.format_exc()}")
            else:
                logger.warning(f"‚ö†Ô∏è –£ –æ–±—ä–µ–∫—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ 'path' –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        else:
            logger.warning(f"‚ö†Ô∏è –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è featured_image —Å—Ç–∞–ª–æ None")
        
        # –†–∞–±–æ—Ç–∞–µ–º —Å –ø–µ—Ä–µ–≤–æ–¥–∏–º—ã–º–∏ –ø–æ–ª—è–º–∏
        logger.info(f"üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥–∏–º—ã–µ –ø–æ–ª—è...")
        current_title = self.safe_translation_getter('title', any_language=True)
        current_slug = self.safe_translation_getter('slug', any_language=True)
        current_meta_title = self.safe_translation_getter('meta_title', any_language=True)
        current_meta_description = self.safe_translation_getter('meta_description', any_language=True)
        current_excerpt = self.safe_translation_getter('excerpt', any_language=True)
        current_content = self.safe_translation_getter('content', any_language=True)
        
        logger.info(f"üìù Title: '{current_title}'")
        logger.info(f"üîó Slug: '{current_slug}'")
        
        need_save = False
        
        # –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è slug –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
        if current_title and not current_slug:
            new_slug = slugify(current_title)
            self.slug = new_slug
            need_save = True
            logger.info(f"üîó –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω slug: '{new_slug}'")
        
        # –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è meta_title –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
        if current_title and not current_meta_title:
            new_meta_title = current_title[:60]
            self.meta_title = new_meta_title
            need_save = True
            logger.info(f"üìÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω meta_title: '{new_meta_title}'")
        
        # –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è meta_description –∏–∑ excerpt –∏–ª–∏ content
        if not current_meta_description:
            if current_excerpt:
                new_meta_desc = current_excerpt[:160]
                self.meta_description = new_meta_desc
                need_save = True
                logger.info(f"üìÑ Meta description –∏–∑ excerpt: '{new_meta_desc}'")
            elif current_content:
                # –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏ –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 160 —Å–∏–º–≤–æ–ª–æ–≤
                clean_content = re.sub(r'<[^>]+>', '', current_content)
                if clean_content:
                    new_meta_desc = clean_content[:160] + '...' if len(clean_content) > 160 else clean_content
                    self.meta_description = new_meta_desc
                    need_save = True
                    logger.info(f"üìÑ Meta description –∏–∑ content: '{new_meta_desc}'")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if need_save:
            logger.info("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π")
            try:
                super().save(*args, **kwargs)
                logger.info("‚úÖ –ü–µ—Ä–µ–≤–æ–¥–∏–º—ã–µ –ø–æ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if self.featured_image:
            logger.info("üñºÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            try:
                self.optimize_featured_image()
                logger.info("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                logger.error(f"üìã Traceback: {traceback.format_exc()}")
        
        logger.info(f"‚úÖ ===== –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, ID={self.pk} =====")
    
    def optimize_featured_image(self):
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è featured image —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∞"""
        logger.info(f"üîß –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ—Å—Ç–∞ ID={self.pk}")
        
        if not self.featured_image:
            logger.info("‚ùå –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
            return
            
        try:
            image_path = self.featured_image.path
            logger.info(f"üîß –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é: {image_path}")
            logger.info(f"üîß –ò–º—è —Ñ–∞–π–ª–∞: {self.featured_image.name}")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é: {e}")
            return
        
        if not os.path.exists(image_path):
            logger.error(f"‚ùå –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {image_path}")
            return
            
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –¥–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            original_size = os.path.getsize(image_path)
            logger.info(f"üìè –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {original_size} bytes")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á–∏—Ç–∞–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            try:
                with Image.open(image_path) as img:
                    logger.info(f"üñºÔ∏è –†–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {img.width}x{img.height}")
                    logger.info(f"üñºÔ∏è –†–µ–∂–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {img.mode}")
                    logger.info(f"üñºÔ∏è –§–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {img.format}")
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç–∏
                    img_copy = img.copy()
                    
            except Exception as img_error:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {img_error}")
                
                # –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–µ—Ä–≤—ã–µ –±–∞–π—Ç—ã —Ñ–∞–π–ª–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                try:
                    with open(image_path, 'rb') as f:
                        first_bytes = f.read(10)
                        logger.info(f"üîç –ü–µ—Ä–≤—ã–µ 10 –±–∞–π—Ç —Ñ–∞–π–ª–∞: {first_bytes}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–≥–∏—á–µ—Å–∫–∏–µ –±–∞–π—Ç—ã
                        if first_bytes.startswith(b'\xff\xd8\xff'):
                            logger.info("üîç –§–∞–π–ª –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∫–∞–∫ JPEG")
                        elif first_bytes.startswith(b'\x89PNG'):
                            logger.info("üîç –§–∞–π–ª –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∫–∞–∫ PNG")
                        elif first_bytes.startswith(b'GIF'):
                            logger.info("üîç –§–∞–π–ª –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∫–∞–∫ GIF")
                        else:
                            logger.warning(f"üîç –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {first_bytes}")
                except Exception as read_error:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: {read_error}")
                
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            processed_img = img_copy
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            if processed_img.mode in ('RGBA', 'P', 'LA'):
                logger.info(f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ {processed_img.mode} –≤ RGB")
                # –°–æ–∑–¥–∞–µ–º –±–µ–ª—ã–π —Ñ–æ–Ω –¥–ª—è –ø—Ä–æ–∑—Ä–∞—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                if processed_img.mode in ('RGBA', 'LA'):
                    background = Image.new('RGB', processed_img.size, (255, 255, 255))
                    background.paste(processed_img, mask=processed_img.split()[-1] if processed_img.mode == 'RGBA' else None)
                    processed_img = background
                else:
                    processed_img = processed_img.convert('RGB')
            
            # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –µ—Å–ª–∏ –±–æ–ª—å—à–µ 1200px –ø–æ —à–∏—Ä–∏–Ω–µ
            if processed_img.width > 1200:
                ratio = 1200 / processed_img.width
                new_height = int(processed_img.height * ratio)
                logger.info(f"üìê –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä —Å {processed_img.width}x{processed_img.height} –¥–æ 1200x{new_height}")
                processed_img = processed_img.resize((1200, new_height), Image.Resampling.LANCZOS)
            else:
                logger.info(f"üìê –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π: {processed_img.width}x{processed_img.height}")
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            import tempfile
            with tempfile.NamedTemporaryFile(suffix='.jpg', delete=False) as temp_file:
                temp_path = temp_file.name
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {temp_path}")
                processed_img.save(temp_path, 'JPEG', quality=85, optimize=True)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                if os.path.exists(temp_path):
                    temp_size = os.path.getsize(temp_path)
                    logger.info(f"‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω, —Ä–∞–∑–º–µ—Ä: {temp_size} bytes")
                    
                    # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
                    import shutil
                    shutil.move(temp_path, image_path)
                    logger.info(f"üîÑ –ó–∞–º–µ–Ω–∏–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    if os.path.exists(image_path):
                        new_size = os.path.getsize(image_path)
                        savings = original_size - new_size
                        savings_percent = (savings / original_size * 100) if original_size > 0 else 0
                        
                        logger.info(f"üìè –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {new_size} bytes")
                        logger.info(f"üíæ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞: {savings} bytes ({savings_percent:.1f}%)")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–π —Ñ–∞–π–ª –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å
                        try:
                            with Image.open(image_path) as test_img:
                                logger.info(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {test_img.width}x{test_img.height}")
                        except Exception as test_error:
                            logger.error(f"‚ùå –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω: {test_error}")
                    else:
                        logger.error(f"‚ùå –§–∞–π–ª –∏—Å—á–µ–∑ –ø–æ—Å–ª–µ –∑–∞–º–µ–Ω—ã!")
                else:
                    logger.error(f"‚ùå –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è!")
                    
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω –æ—Å—Ç–∞–ª—Å—è
                if os.path.exists(temp_path):
                    os.unlink(temp_path)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            logger.error(f"üìã –ü–æ–ª–Ω—ã–π traceback: {traceback.format_exc()}")
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É
            if "cannot identify image file" in str(e):
                logger.error("üí° –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º")
                logger.error("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PNG –∏–ª–∏ JPG")
            elif "Permission denied" in str(e):
                logger.error("üí° –ü—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É")
            elif "No such file or directory" in str(e):
                logger.error("üí° –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤–æ –≤—Ä–µ–º—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
    
    def get_next_post(self):
        """–°–ª–µ–¥—É—é—â–∞—è —Å—Ç–∞—Ç—å—è"""
        return BlogPost.objects.filter(
            published_at__gt=self.published_at,
            status='published'
        ).order_by('published_at').first()
    
    def get_previous_post(self):
        """–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç–∞—Ç—å—è"""
        return BlogPost.objects.filter(
            published_at__lt=self.published_at,
            status='published'
        ).order_by('-published_at').first()
    
    def increment_views(self):
        """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤"""
        self.views_count += 1
        self.save(update_fields=['views_count'])
    
    def get_related_posts(self, limit=3):
        """–ü–æ—Ö–æ–∂–∏–µ —Å—Ç–∞—Ç—å–∏"""
        return BlogPost.objects.filter(
            category=self.category,
            status='published'
        ).exclude(pk=self.pk).order_by('-published_at')[:limit]
    
    def get_display_title(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        return self.safe_translation_getter('title', any_language=True) or f"Post {self.pk}"
    
    def get_display_content(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        return self.safe_translation_getter('content', any_language=True) or ''
    
    def get_display_excerpt(self):
        """–ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        excerpt = self.safe_translation_getter('excerpt', any_language=True)
        if excerpt:
            return excerpt
        
        # –ï—Å–ª–∏ –Ω–µ—Ç excerpt, —Å–æ–∑–¥–∞–µ–º –∏–∑ content
        content = self.get_display_content()
        if content:
            clean_content = re.sub(r'<[^>]+>', '', content)
            return clean_content[:300] + '...' if len(clean_content) > 300 else clean_content
        
        return ''
    
    def get_display_meta_title(self):
        """–ü–æ–ª—É—á–∏—Ç—å meta title –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        return (self.safe_translation_getter('meta_title', any_language=True) or 
                self.get_display_title())
    
    def get_display_meta_description(self):
        """–ü–æ–ª—É—á–∏—Ç—å meta description –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        return (self.safe_translation_getter('meta_description', any_language=True) or 
                self.get_display_excerpt())
    
    def generate_schema_json(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è JSON-LD —Ä–∞–∑–º–µ—Ç–∫–∏"""
        from django.conf import settings
        
        schema = {
            "@context": "https://schema.org",
            "@type": self.safe_translation_getter('schema_article_type', any_language=True) or 'Article',
            "headline": self.get_display_meta_title(),
            "description": self.get_display_meta_description(),
            "author": {
                "@type": "Person",
                "name": self.author.get_full_name() or self.author.username
            },
            "publisher": {
                "@type": "Organization",
                "name": "Abroads Tours",
                "logo": {
                    "@type": "ImageObject",
                    "url": f"{getattr(settings, 'SITE_URL', 'http://localhost:8000')}/static/img/logo.png"
                }
            },
            "datePublished": self.published_at.isoformat(),
            "dateModified": self.updated_at.isoformat(),
            "url": f"{getattr(settings, 'SITE_URL', 'http://localhost:8000')}{self.get_absolute_url()}",
        }
        
        if self.featured_image:
            schema["image"] = {
                "@type": "ImageObject",
                "url": f"{getattr(settings, 'SITE_URL', 'http://localhost:8000')}{self.featured_image.url}",
                "width": 1200,
                "height": 630
            }
        
        if self.category:
            schema["articleSection"] = str(self.category)
        
        if self.tags.exists():
            schema["keywords"] = [tag.name for tag in self.tags.all()]
        
        return schema


class BlogImage(models.Model):
    """–ú–æ–¥–µ–ª—å –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Å—Ç–∞—Ç—å—è—Ö"""
    post = models.ForeignKey(BlogPost, on_delete=models.CASCADE, related_name='images')
    image = ThumbnailerImageField(upload_to='blog/images/')
    alt_text = models.CharField(max_length=200, blank=True)
    caption = models.CharField(max_length=300, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        verbose_name = "Blog Image"
        verbose_name_plural = "Blog Images"
    
    def __str__(self):
        post_title = self.post.safe_translation_getter('title', any_language=True) or f"Post {self.post.pk}"
        return f"Image for {post_title}"
    
    def save(self, *args, **kwargs):
        logger.info(f"üñºÔ∏è –°–æ—Ö—Ä–∞–Ω—è–µ–º BlogImage –¥–ª—è –ø–æ—Å—Ç–∞ {self.post.pk if self.post else 'None'}")
        
        if self.image:
            logger.info(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {self.image.name}")
        
        super().save(*args, **kwargs)
        logger.info(f"‚úÖ BlogImage —Å–æ—Ö—Ä–∞–Ω–µ–Ω, ID={self.pk}")


class BlogComment(models.Model):
    """–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Å—Ç–∞—Ç—å—è–º"""
    post = models.ForeignKey(BlogPost, on_delete=models.CASCADE, related_name='comments')
    name = models.CharField(max_length=100)
    email = models.EmailField()
    content = models.TextField()
    is_approved = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        verbose_name = "Comment"
        verbose_name_plural = "Comments"
        ordering = ['-created_at']
    
    def __str__(self):
        post_title = self.post.safe_translation_getter('title', any_language=True) or f"Post {self.post.pk}"
        return f"Comment by {self.name} on {post_title}"
    
    def save(self, *args, **kwargs):
        logger.info(f"üí¨ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç {self.name} –∫ –ø–æ—Å—Ç—É {self.post.pk if self.post else 'None'}")
        super().save(*args, **kwargs)
        logger.info(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω, ID={self.pk}")
