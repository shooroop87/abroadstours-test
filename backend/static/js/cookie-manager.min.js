// cookie-manager.js — финальная версия
(function () {
  "use strict";

  // Глобальное пространство
  window.App = window.App || {};
  const App = window.App;

  // ===== ЕДИНАЯ ТОЧКА ОЖИДАНИЯ ПРЕЛОАДЕРА ===================================
  function onPreloaderReady(cb) {
    if (document.body.classList.contains('preloader-done')) {
      cb();
      return;
    }
    window.addEventListener('preloader:done', cb, { once: true });
  }

  function isPreloaderComplete() {
    if (document.body.classList.contains('preloader-done')) return true;
    if (typeof window.isPreloaderHidden === 'function') {
      try { return !!window.isPreloaderHidden(); } catch (_) {}
    }
    const preloader = document.querySelector('.js-preloader');
    if (!preloader) return true;
    return preloader.classList.contains('-is-hidden');
  }

  // ===== РАБОТА С СОГЛАСИЯМИ =================================================
  function getCookieConsents() {
    try {
      const stored = localStorage.getItem('cookieConsents');
      if (stored) {
        const parsed = JSON.parse(stored);
        if (typeof parsed.hasConsented !== 'undefined') {
          return parsed;
        }
      }
    } catch (e) {
      console.error('Cookie consents parse error:', e);
      localStorage.removeItem('cookieConsents');
    }
    return { hasConsented: false };
  }

  function saveCookieConsents(consents) {
    try {
      localStorage.setItem('cookieConsents', JSON.stringify(consents));
      const cookieValue = encodeURIComponent(JSON.stringify({
        hasConsented: consents.hasConsented,
        timestamp: consents.timestamp,
        version: consents.version
      }));
      document.cookie = `cookieConsent=${cookieValue}; path=/; max-age=31536000; SameSite=Lax;`;
      console.log('Cookie consents saved:', consents);
    } catch (error) {
      console.error('Saving cookie consents failed:', error);
    }
  }

  function applyCookieConsents(consents) {
    console.log('Applying cookie consents:', consents);
    if (consents.analytics) loadAnalytics();
    if (consents.marketing) loadMarketing();
    if (consents.functional) loadFunctional();
  }

  function clearNonEssentialCookies() {
    const cookiesToClear = [
      '_ga', '_gid', '_gat', '_gat_gtag',
      '_fbp', '_fbc',
      '__utma', '__utmb', '__utmc', '__utmt', '__utmz',
      'ym_d', 'ym_isad', 'ym_uid', '_ym_uid', '_ym_d', '_ym_isad'
    ];
    cookiesToClear.forEach((name) => {
      document.cookie = `${name}=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;`;
      document.cookie = `${name}=; Path=/; Domain=${location.hostname}; Expires=Thu, 01 Jan 1970 00:00:01 GMT;`;
      const parts = location.hostname.split('.');
      if (parts.length > 2) {
        const parent = '.' + parts.slice(-2).join('.');
        document.cookie = `${name}=; Path=/; Domain=${parent}; Expires=Thu, 01 Jan 1970 00:00:01 GMT;`;
      }
    });
  }

  // ===== ИНТЕГРАЦИИ ==========================================================
  function loadAnalytics() {
    console.log('Loading analytics scripts...');
    // Google Tag Manager
    if (typeof window.dataLayer === 'undefined') {
      window.dataLayer = window.dataLayer || [];
      const GTM_ID = 'GTM-K4RDCK5D';
      window.dataLayer.push({ 'gtm.start': Date.now(), event: 'gtm.js' });

      const s = document.createElement('script');
      s.async = true;
      s.src = `https://www.googletagmanager.com/gtm.js?id=${GTM_ID}`;
      s.onload = () => {
        console.log('GTM loaded');
        window.dataLayer.push({ event: 'cookie_consent_granted', cookie_consent_analytics: true, timestamp: new Date().toISOString() });
      };
      s.onerror = () => console.error('GTM load failed');
      document.head.appendChild(s);

      if (!document.querySelector('noscript iframe[src*="googletagmanager.com"]')) {
        const ns = document.createElement('noscript');
        ns.innerHTML = `<iframe src="https://www.googletagmanager.com/ns.html?id=${GTM_ID}" height="0" width="0" style="display:none;visibility:hidden"></iframe>`;
        document.head.appendChild(ns);
      }
    } else {
      window.dataLayer.push({ event: 'cookie_consent_granted', cookie_consent_analytics: true, timestamp: new Date().toISOString() });
    }

    // Yandex Metrica
    if (typeof window.ym === 'undefined') {
      const YID = 103141713;
      (function(m,e,t,r,i,k,a){
        m[i]=m[i]||function(){(m[i].a=m[i].a||[]).push(arguments)};
        m[i].l=1*new Date();
        for (let j=0;j<document.scripts.length;j++){
          if (document.scripts[j].src === r) { console.log('YM already loaded'); return; }
        }
        k=e.createElement(t); a=e.getElementsByTagName(t)[0];
        k.async=1; k.src=r;
        k.onload=()=>console.log('Yandex Metrica script loaded');
        k.onerror=()=>console.error('Yandex Metrica load failed');
        a.parentNode.insertBefore(k,a);
      })(window, document, "script", "https://mc.yandex.ru/metrika/tag.js", "ym");

      setTimeout(() => {
        if (typeof window.ym !== 'undefined') {
          window.ym(YID, "init", { clickmap:true, trackLinks:true, accurateTrackBounce:true, webvisor:true });
          console.log('YM initialized', YID);
        }
      }, 500);

      if (!document.querySelector('noscript img[src*="mc.yandex.ru"]')) {
        const ns = document.createElement('noscript');
        ns.innerHTML = `<div><img src="https://mc.yandex.ru/watch/${YID}" style="position:absolute; left:-9999px;" alt="" /></div>`;
        document.head.appendChild(ns);
      }
    } else {
      console.log('Yandex Metrica already initialized');
    }
  }

  function loadMarketing() {
    console.log('Marketing cookies enabled');
    if (typeof window.dataLayer !== 'undefined') {
      window.dataLayer.push({ event: 'cookie_consent_marketing', cookie_consent_marketing: true, timestamp: new Date().toISOString() });
    }
  }

  function loadFunctional() {
    console.log('Functional cookies enabled');
    if (typeof window.dataLayer !== 'undefined') {
      window.dataLayer.push({ event: 'cookie_consent_functional', cookie_consent_functional: true, timestamp: new Date().toISOString() });
    }
  }

  // ===== WHATSAPP: ЗАГРУЗКА И ПОКАЗ ТОЛЬКО ПОСЛЕ ПРЕЛОАДЕРА ==================
  function showWhatsAppButton() {
    if (!window.WhatsAppManager || typeof window.WhatsAppManager.showButton !== 'function') {
      console.warn('WhatsAppManager not ready yet');
      return;
    }
    onPreloaderReady(() => {
      document.body.classList.add('cookie-consent-given'); // для CSS-стоппера
      window.WhatsAppManager.showButton();
      console.log('Cookie Manager: delegated show to WhatsAppManager after preloader');
    });
  }

  function loadWhatsAppButton() {
    if (!isPreloaderComplete()) {
      console.log('Cookie Manager: preloader active, waiting to load WhatsApp…');
      onPreloaderReady(() => {
        console.log('Cookie Manager: preloader done, loading WhatsApp…');
        loadWhatsAppButton();
      });
      return Promise.resolve();
    }

    console.log('Cookie Manager: Loading WhatsApp script…');

    if (document.querySelector('script[src*="whatsapp.js"]')) {
      console.log('WhatsApp script already loaded');
      showWhatsAppButton();
      return Promise.resolve();
    }

    return new Promise((resolve, reject) => {
      try {
        const script = document.createElement('script');
        script.src = "/static/js/whatsapp.js";
        script.defer = true;
        script.onload = () => { console.log('WhatsApp script loaded successfully'); showWhatsAppButton(); resolve(); };
        script.onerror = () => { console.error('Failed to load WhatsApp script'); reject(new Error('Failed to load WhatsApp script')); };
        document.body.appendChild(script);

        setTimeout(() => {
          const ok = document.querySelector('script[src*="whatsapp.js"]');
          if (!ok) console.warn('WhatsApp script loading timeout');
        }, 5000);
      } catch (e) {
        console.error('WhatsApp load error:', e);
        reject(e);
      }
    });
  }

  // ===== UI ЭЛЕМЕНТЫ БАННЕРА/МОДАЛКИ ========================================
  function setupUI() {
    const cookieBanner = document.getElementById('cookieBanner');
    const cookieConsent = document.getElementById('cookieConsent');
    const acceptCookiesBanner = document.getElementById('acceptCookiesBanner');
    const manageCookiesBanner = document.getElementById('manageCookiesBanner');
    const acceptAllCookies = document.getElementById('acceptAllCookies');
    const acceptSelectedCookies = document.getElementById('acceptSelectedCookies');
    const rejectAllCookies = document.getElementById('rejectAllCookies');
    const closeCookieModal = document.getElementById('closeCookieModal');

    let isProcessing = false;
    let whatsappLoaded = false;

    function hideAllCookieElements() {
      if (cookieBanner) cookieBanner.style.display = 'none';
      if (cookieConsent) cookieConsent.style.display = 'none';
      document.body.classList.add('cookie-consent-given');
      document.body.style.overflow = '';
      console.log('All cookie elements hidden');
    }

    function showModal() {
      if (!cookieConsent) return;
      cookieConsent.style.display = 'flex';
      document.body.style.overflow = 'hidden';

      const consents = getCookieConsents();
      if (consents.hasConsented) {
        const analyticsCheckbox = document.getElementById('analytics-cookies');
        const marketingCheckbox = document.getElementById('marketing-cookies');
        const functionalCheckbox = document.getElementById('functional-cookies');
        if (analyticsCheckbox) analyticsCheckbox.checked = !!consents.analytics;
        if (marketingCheckbox) marketingCheckbox.checked = !!consents.marketing;
        if (functionalCheckbox) functionalCheckbox.checked = !!consents.functional;
      }
    }

    function hideModal() {
      if (cookieConsent) cookieConsent.style.display = 'none';
      document.body.style.overflow = '';
    }

    function sendAnalyticsEvent(action) {
      const consents = getCookieConsents();
      if (!consents.analytics) return;
      try {
        if (typeof window.dataLayer !== 'undefined') {
          window.dataLayer.push({ event: 'cookie_consent_action', cookie_action: action, timestamp: new Date().toISOString() });
          console.log('GTM event sent:', action);
        }
      } catch (_) {}
      try {
        if (typeof window.ym !== 'undefined') {
          window.ym(103141713, 'reachGoal', 'cookie_consent', { action, timestamp: new Date().toISOString() });
          console.log('YM event sent:', action);
        }
      } catch (_) {}
    }

    function acceptAllCookiesFunction() {
      const consents = {
        hasConsented: true, essential: true, analytics: true, marketing: true, functional: true,
        timestamp: new Date().toISOString(), version: '1.0', saved: true
      };
      saveCookieConsents(consents);
      setTimeout(() => applyCookieConsents(consents), 100);
      setTimeout(() => sendAnalyticsEvent('accept_all'), 500);
    }

    function acceptSelectedCookiesFunction() {
      const analyticsCheckbox = document.getElementById('analytics-cookies');
      const marketingCheckbox = document.getElementById('marketing-cookies');
      const functionalCheckbox = document.getElementById('functional-cookies');
      const consents = {
        hasConsented: true, essential: true,
        analytics: analyticsCheckbox ? !!analyticsCheckbox.checked : false,
        marketing: marketingCheckbox ? !!marketingCheckbox.checked : false,
        functional: functionalCheckbox ? !!functionalCheckbox.checked : false,
        timestamp: new Date().toISOString(), version: '1.0', saved: true
      };
      saveCookieConsents(consents);
      setTimeout(() => applyCookieConsents(consents), 100);
      setTimeout(() => sendAnalyticsEvent('accept_selected'), 500);
    }

    function rejectAllCookiesFunction() {
      const consents = {
        hasConsented: true, essential: true, analytics: false, marketing: false, functional: false,
        timestamp: new Date().toISOString(), version: '1.0', saved: true
      };
      saveCookieConsents(consents);
      applyCookieConsents(consents);
      clearNonEssentialCookies();
      setTimeout(() => sendAnalyticsEvent('reject_all'), 500);
    }

    // Обработчики
    if (acceptCookiesBanner) {
      acceptCookiesBanner.addEventListener('click', () => {
        if (isProcessing) return; isProcessing = true;
        acceptAllCookiesFunction(); hideAllCookieElements();
        // грузим WA только ПОСЛЕ прелоадера
        onPreloaderReady(() => {
          if (!whatsappLoaded) {
            loadWhatsAppButton().then(() => { whatsappLoaded = true; console.log('WhatsApp loaded after accept banner'); });
          }
        });
        setTimeout(() => { isProcessing = false; }, 500);
      });
    }

    if (manageCookiesBanner) {
      manageCookiesBanner.addEventListener('click', () => {
        if (isProcessing) return;
        hideAllCookieElements(); showModal();
      });
    }

    if (acceptAllCookies) {
      acceptAllCookies.addEventListener('click', () => {
        if (isProcessing) return; isProcessing = true;
        acceptAllCookiesFunction(); hideModal();
        onPreloaderReady(() => {
          if (!whatsappLoaded) {
            loadWhatsAppButton().then(() => { whatsappLoaded = true; console.log('WhatsApp loaded after accept all'); });
          }
        });
        setTimeout(() => { isProcessing = false; }, 500);
      });
    }

    if (acceptSelectedCookies) {
      acceptSelectedCookies.addEventListener('click', () => {
        if (isProcessing) return; isProcessing = true;
        acceptSelectedCookiesFunction(); hideModal();
        onPreloaderReady(() => {
          if (!whatsappLoaded) {
            loadWhatsAppButton().then(() => { whatsappLoaded = true; console.log('WhatsApp loaded after accept selected'); });
          }
        });
        setTimeout(() => { isProcessing = false; }, 500);
      });
    }

    if (rejectAllCookies) {
      rejectAllCookies.addEventListener('click', () => {
        if (isProcessing) return; isProcessing = true;
        rejectAllCookiesFunction(); hideModal();
        // По твоей логике: даже при отклонении — показываем WhatsApp
        onPreloaderReady(() => {
          if (!whatsappLoaded) {
            loadWhatsAppButton().then(() => { whatsappLoaded = true; console.log('WhatsApp loaded after reject all'); });
          }
        });
        setTimeout(() => { isProcessing = false; }, 500);
      });
    }

    if (closeCookieModal) {
      closeCookieModal.addEventListener('click', () => hideModal());
    }

    if (cookieConsent) {
      cookieConsent.addEventListener('click', (e) => {
        if (e.target === cookieConsent) hideModal();
      });
    }

    // Первичная инициализация по текущим консентам
    const consents = getCookieConsents();
    if (!consents.hasConsented) {
      console.log('New user — show banner soon');
      if (cookieBanner) {
        setTimeout(() => {
          if (!getCookieConsents().hasConsented) {
            cookieBanner.style.display = 'block';
            console.log('Cookie banner displayed');
          }
        }, 2000);
      }
    } else {
      console.log('Returning user — apply and try WhatsApp after preloader');
      applyCookieConsents(consents);
      // скрыть элементы если есть
      if (cookieBanner) cookieBanner.style.display = 'none';
      if (cookieConsent) cookieConsent.style.display = 'none';
      document.body.classList.add('cookie-consent-given');

      onPreloaderReady(() => {
        if (!whatsappLoaded) {
          loadWhatsAppButton().then(() => { whatsappLoaded = true; console.log('WhatsApp loaded for returning user'); });
        }
      });
    }

    // Экспорт API
    App.CookieManager = {
      showSettings: showModal,
      updateConsents: (newConsents) => {
        const current = getCookieConsents();
        const updated = { ...current, ...newConsents, timestamp: new Date().toISOString() };
        saveCookieConsents(updated);
        applyCookieConsents(updated);
        console.log('Consents updated:', updated);
      },
      getCurrentConsents: getCookieConsents,
      loadWhatsApp: () => { onPreloaderReady(() => loadWhatsAppButton()); },
      isReadyForWhatsApp: isPreloaderComplete,
      debug: () => {
        console.log('=== COOKIE MANAGER DEBUG ===');
        console.log('Consents:', getCookieConsents());
        console.log('Preloader done:', isPreloaderComplete());
        console.log('localStorage:', localStorage.getItem('cookieConsents'));
        console.log('dataLayer:', window.dataLayer);
        console.log('YM available:', typeof window.ym !== 'undefined');
        console.log('WA script loaded:', !!document.querySelector('script[src*="whatsapp.js"]'));
        console.log('Body classes:', document.body.className);
        console.log('=== END DEBUG ===');
      }
    };

    // Бэкомпат-глобали
    window.showCookieSettings = App.CookieManager.showSettings;
    window.updateCookieConsents = App.CookieManager.updateConsents;
    window.getCurrentCookieConsents = App.CookieManager.getCurrentConsents;
    window.loadWhatsAppButton = () => App.CookieManager.loadWhatsApp();
    window.getCookieConsents = window.getCookieConsents || getCookieConsents; // чтобы не было ReferenceError
  }

  // ===== ЗАПУСК ПО DOM READY И «НА ВЕСЬ СЛУЧАЙ» ==============================
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', setupUI);
  } else {
    setupUI();
  }

  // Если скрипт вставлен на страницу после DOMContentLoaded
  if (document.currentScript) {
    document.currentScript.setAttribute('data-loaded', 'true');
  }
})();
