// backend/core/static/admin/js/custom_admin.js

document.addEventListener('DOMContentLoaded', function() {
    console.log('üé® Loading custom WordPress-style admin...');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ –∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º –º–æ–¥—É–ª–µ–π
    addModuleIcons();
    
    // –£–ª—É—á—à–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    enhanceNavigation();
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if (window.location.pathname.includes('/admin/')) {
        addDashboardStats();
    }
    
    // –£–ª—É—á—à–∞–µ–º —Ñ–æ—Ä–º—ã
    enhanceForms();
    
    // –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    enhanceMessages();
});

function addModuleIcons() {
    const moduleHeaders = document.querySelectorAll('.module h2, .module h3');
    
    moduleHeaders.forEach(header => {
        const text = header.textContent.toLowerCase();
        let icon = '';
        
        if (text.includes('blog') || text.includes('post')) {
            icon = 'üìù';
        } else if (text.includes('categor')) {
            icon = 'üìÅ';
        } else if (text.includes('comment')) {
            icon = 'üí¨';
        } else if (text.includes('user')) {
            icon = 'üë§';
        } else if (text.includes('image') || text.includes('media')) {
            icon = 'üñºÔ∏è';
        } else if (text.includes('tag')) {
            icon = 'üè∑Ô∏è';
        } else if (text.includes('auth')) {
            icon = 'üîê';
        } else if (text.includes('site')) {
            icon = 'üåê';
        } else {
            icon = '‚öôÔ∏è';
        }
        
        header.innerHTML = icon + ' ' + header.innerHTML;
    });
}

function enhanceNavigation() {
    // –î–æ–±–∞–≤–ª—è–µ–º —Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏
    const breadcrumbs = document.querySelector('.breadcrumbs');
    if (breadcrumbs) {
        breadcrumbs.style.background = '#fff';
        breadcrumbs.style.borderBottom = '1px solid #ccd0d4';
        breadcrumbs.style.padding = '10px 20px';
        breadcrumbs.style.fontSize = '13px';
    }
    
    // –£–ª—É—á—à–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const navButtons = document.querySelectorAll('.button, input[type="submit"]');
    navButtons.forEach(button => {
        button.addEventListener('mouseenter', function() {
            this.style.transform = 'translateY(-1px)';
            this.style.boxShadow = '0 2px 4px rgba(0,0,0,0.1)';
        });
        
        button.addEventListener('mouseleave', function() {
            this.style.transform = 'translateY(0)';
            this.style.boxShadow = 'none';
        });
    });
}

function addDashboardStats() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∞–¥–º–∏–Ω–∫–∏
    if (!document.querySelector('#content h1') || 
        !document.querySelector('#content h1').textContent.includes('Site administration')) {
        return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const statsHTML = `
        <div class="blog-admin-header">
            <h2 style="margin: 0; font-size: 24px;">üåç Abroads Tours - Admin Dashboard</h2>
            <p style="margin: 10px 0 0 0; opacity: 0.9;">Welcome to your travel blog administration panel</p>
            <div class="blog-admin-stats">
                <div class="blog-stat-card">
                    <span class="blog-stat-number" id="posts-count">...</span>
                    <div class="blog-stat-label">Blog Posts</div>
                </div>
                <div class="blog-stat-card">
                    <span class="blog-stat-number" id="categories-count">...</span>
                    <div class="blog-stat-label">Categories</div>
                </div>
                <div class="blog-stat-card">
                    <span class="blog-stat-number" id="comments-count">...</span>
                    <div class="blog-stat-label">Comments</div>
                </div>
                <div class="blog-stat-card">
                    <span class="blog-stat-number" id="users-count">...</span>
                    <div class="blog-stat-label">Users</div>
                </div>
            </div>
        </div>
    `;
    
    const content = document.querySelector('#content');
    if (content) {
        content.insertAdjacentHTML('afterbegin', statsHTML);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        loadDashboardStats();
    }
}

function loadDashboardStats() {
    // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã AJAX –∑–∞–ø—Ä–æ—Å
    setTimeout(() => {
        const stats = {
            posts: Math.floor(Math.random() * 50) + 10,
            categories: Math.floor(Math.random() * 10) + 3,
            comments: Math.floor(Math.random() * 200) + 50,
            users: Math.floor(Math.random() * 20) + 5
        };
        
        animateCounter('posts-count', stats.posts);
        animateCounter('categories-count', stats.categories);
        animateCounter('comments-count', stats.comments);
        animateCounter('users-count', stats.users);
    }, 500);
}

function animateCounter(elementId, targetValue) {
    const element = document.getElementById(elementId);
    if (!element) return;
    
    let currentValue = 0;
    const increment = targetValue / 20;
    const timer = setInterval(() => {
        currentValue += increment;
        if (currentValue >= targetValue) {
            currentValue = targetValue;
            clearInterval(timer);
        }
        element.textContent = Math.floor(currentValue);
    }, 50);
}

function enhanceForms() {
    // –î–æ–±–∞–≤–ª—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è —Ñ–æ—Ä–º
    const inputs = document.querySelectorAll('input[type="text"], input[type="email"], textarea');
    
    inputs.forEach(input => {
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Ñ–æ–∫—É—Å–∞
        input.addEventListener('focus', function() {
            this.style.boxShadow = '0 0 0 2px rgba(0, 115, 170, 0.2)';
            this.style.borderColor = '#0073aa';
        });
        
        input.addEventListener('blur', function() {
            this.style.boxShadow = 'inset 0 1px 2px rgba(0,0,0,0.07)';
            this.style.borderColor = '#ccd0d4';
        });
    });
    
    // –£–ª—É—á—à–∞–µ–º —á–µ–∫–±–æ–∫—Å—ã
    const checkboxes = document.querySelectorAll('input[type="checkbox"]');
    checkboxes.forEach(checkbox => {
        checkbox.style.accentColor = '#0073aa';
    });
}

function enhanceMessages() {
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    const messages = document.querySelectorAll('.messagelist li');
    
    messages.forEach((message, index) => {
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è
        const closeButton = document.createElement('span');
        closeButton.innerHTML = '√ó';
        closeButton.style.cssText = `
            float: right;
            cursor: pointer;
            font-size: 18px;
            font-weight: bold;
            opacity: 0.7;
            margin-left: 10px;
        `;
        
        closeButton.addEventListener('click', function() {
            message.style.animation = 'slideUp 0.3s ease';
            setTimeout(() => message.remove(), 300);
        });
        
        message.appendChild(closeButton);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (message.parentNode) {
                message.style.animation = 'slideUp 0.3s ease';
                setTimeout(() => message.remove(), 300);
            }
        }, 5000 + (index * 1000));
    });
}

// –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏–∏
const style = document.createElement('style');
style.textContent = `
    @keyframes slideUp {
        from {
            opacity: 1;
            transform: translateY(0);
            max-height: 100px;
        }
        to {
            opacity: 0;
            transform: translateY(-20px);
            max-height: 0;
            padding: 0;
            margin: 0;
        }
    }
    
    .module {
        transition: all 0.2s ease !important;
    }
    
    .module:hover {
        box-shadow: 0 2px 8px rgba(0,0,0,0.1) !important;
    }
    
    .button, input[type="submit"] {
        transition: all 0.2s ease !important;
    }
    
    .results tbody tr {
        transition: background-color 0.2s ease !important;
    }
    
    /* –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∫—Ä–æ–ª–ª–±–∞—Ä */
    ::-webkit-scrollbar {
        width: 8px;
    }
    
    ::-webkit-scrollbar-track {
        background: #f1f1f1;
    }
    
    ::-webkit-scrollbar-thumb {
        background: #ccd0d4;
        border-radius: 4px;
    }
    
    ::-webkit-scrollbar-thumb:hover {
        background: #0073aa;
    }
`;

document.head.appendChild(style);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è WordPress-–ø–æ–¥–æ–±–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showAdminNotice(message, type = 'success') {
    const notice = document.createElement('div');
    notice.className = `notice notice-${type} is-dismissible`;
    notice.innerHTML = `
        <p>${message}</p>
        <button type="button" class="notice-dismiss">
            <span class="screen-reader-text">Dismiss this notice.</span>
        </button>
    `;
    
    const content = document.querySelector('#content');
    if (content) {
        content.insertBefore(notice, content.firstChild);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
        setTimeout(() => {
            notice.style.animation = 'slideUp 0.3s ease';
            setTimeout(() => notice.remove(), 300);
        }, 4000);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
window.showAdminNotice = showAdminNotice;