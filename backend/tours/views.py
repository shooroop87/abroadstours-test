# backend/tours/views.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import logging

from django.conf import settings
from django.http import Http404, JsonResponse
from django.shortcuts import get_object_or_404
from django.utils.translation import get_language
from django.views.generic import DetailView, ListView

from .models import Tour, TourCategory, TourDifficulty

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger("tours")


class TourListView(ListView):
    """–ü—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—É—Ä–æ–≤"""

    model = Tour
    template_name = "tours/tour_list.html"
    context_object_name = "tours"
    paginate_by = 12

    def get_queryset(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ —Ç—É—Ä—ã"""
        logger.info("üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç—É—Ä–æ–≤")

        queryset = (
            Tour.objects.filter(status="published")
            .select_related("author", "category", "difficulty")
            .prefetch_related("tags", "images")
            .order_by("-is_featured", "sort_order", "-created_at")
        )

        total_tours = queryset.count()
        logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ç—É—Ä–æ–≤: {total_tours}")

        return queryset

    def get_context_data(self, **kwargs):
        """–î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–ø–∏—Å–∫–∞ —Ç—É—Ä–æ–≤"""
        logger.info("üîß –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ç—É—Ä–æ–≤")

        context = super().get_context_data(**kwargs)
        tours = context.get("tours", [])

        logger.info(f"üìã –û—Ç–æ–±—Ä–∞–∂–∞–µ–º {len(tours)} —Ç—É—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")

        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        context["categories"] = TourCategory.objects.filter(is_active=True).order_by(
            "sort_order"
        )

        # SEO
        context["page_title"] = "All Tours - Abroads Tours"
        context["page_description"] = (
            "Discover our amazing tours. Small group experiences from Milan to Lake Como, wine regions, and more."
        )

        logger.info("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ç—É—Ä–æ–≤ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω")
        return context


class TourCategoryView(ListView):
    """–¢—É—Ä—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""

    model = Tour
    template_name = "tours/category.html"
    context_object_name = "tours"
    paginate_by = 12

    def get_queryset(self):
        """–ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        category_slug = self.kwargs["slug"]
        logger.info(f"üìÇ –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: '{category_slug}'")

        self.category = get_object_or_404(
            TourCategory, translations__slug=category_slug, is_active=True
        )

        category_name = self.category.safe_translation_getter("name", any_language=True)
        logger.info(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–∞–π–¥–µ–Ω–∞: '{category_name}' (ID={self.category.id})")

        queryset = (
            Tour.objects.filter(category=self.category, status="published")
            .select_related("author", "category", "difficulty")
            .prefetch_related("tags", "images")
            .order_by("-is_featured", "sort_order", "-created_at")
        )

        total_tours = queryset.count()
        logger.info(f"üìã –¢—É—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {total_tours}")

        return queryset

    def get_context_data(self, **kwargs):
        """–§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        logger.info("üîß –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—É—Ä–æ–≤")

        context = super().get_context_data(**kwargs)
        context["category"] = self.category

        category_name = self.category.safe_translation_getter("name", any_language=True)
        category_description = self.category.safe_translation_getter(
            "description", any_language=True
        )

        # SEO
        context["page_title"] = f"{category_name} - Tours"
        context["page_description"] = (
            category_description
            or f"Discover amazing {category_name.lower()} with Abroads Tours"
        )

        logger.info(f"üìÇ –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_name}")
        return context


class TourDetailView(DetailView):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç—É—Ä–∞"""

    model = Tour
    template_name = "tours/tour_detail.html"
    context_object_name = "tour"
    slug_field = "translations__slug"
    slug_url_kwarg = "slug"

    def get_queryset(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ —Ç—É—Ä—ã"""
        logger.info("üìÑ –ü–æ–ª—É—á–∞–µ–º queryset –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç—É—Ä–∞")

        queryset = (
            Tour.objects.filter(status="published")
            .select_related("author", "category", "difficulty")
            .prefetch_related(
                "tags",
                "images",
                "faqs",
                "reviews", 
                "meeting_points",  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º meeting_points
            )
        )

        return queryset

    def get_object(self, queryset=None):
        """–ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Ç—É—Ä–∞"""
        logger.info("üîç –ü–æ–∏—Å–∫ —Ç—É—Ä–∞ –ø–æ slug")

        if queryset is None:
            queryset = self.get_queryset()

        slug = self.kwargs.get(self.slug_url_kwarg)
        logger.info(f"üîç –ò—â–µ–º —Ç—É—Ä —Å slug: '{slug}'")

        if slug is None:
            logger.error("‚ùå Slug –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
            raise Http404("No slug provided")

        try:
            # –ò—â–µ–º —Ç—É—Ä –ø–æ slug –≤ –ø–µ—Ä–µ–≤–æ–¥–∞—Ö
            obj = queryset.get(translations__slug=slug)
            logger.info(
                f"‚úÖ –¢—É—Ä –Ω–∞–π–¥–µ–Ω: ID={obj.id}, Title='{obj.safe_translation_getter('title', any_language=True)}'"
            )

            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
            logger.info("üëÅÔ∏è –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤")
            obj.increment_views()

            return obj

        except Tour.DoesNotExist:
            logger.error(f"‚ùå –¢—É—Ä —Å slug '{slug}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            raise Http404("Tour not found")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—É—Ä–∞: {e}")
            raise

    def get_context_data(self, **kwargs):
        """–§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        logger.info("üîß –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç—É—Ä–∞")

        context = super().get_context_data(**kwargs)
        tour = self.get_object()

        # SEO
        context["page_title"] = tour.safe_translation_getter(
            "meta_title", any_language=True
        ) or tour.safe_translation_getter("title", any_language=True)
        context["page_description"] = tour.safe_translation_getter(
            "meta_description", any_language=True
        ) or tour.safe_translation_getter("short_description", any_language=True)

        # –ü–æ—Ö–æ–∂–∏–µ —Ç—É—Ä—ã
        logger.info("üîó –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ö–æ–∂–∏–µ —Ç—É—Ä—ã")
        related_tours = tour.get_related_tours(limit=4)
        context["related_tours"] = related_tours
        logger.info(f"üîó –ù–∞–π–¥–µ–Ω–æ –ø–æ—Ö–æ–∂–∏—Ö —Ç—É—Ä–æ–≤: {len(related_tours)}")

        # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏ (–ø–µ—Ä–≤—ã–µ 4 –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∫–∏)
        context["gallery_images"] = tour.images.filter(is_featured=True).order_by(
            "sort_order"
        )[:4]
        context["all_images"] = tour.images.all().order_by("sort_order")

        # FAQ (–∞–∫—Ç–∏–≤–Ω—ã–µ)
        context["faqs"] = tour.faqs.filter(is_active=True).order_by("sort_order")

        # –û—Ç–∑—ã–≤—ã (–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ)
        context["reviews"] = tour.reviews.filter(is_verified=True).order_by(
            "-is_featured", "sort_order", "-review_date"
        )

        # –¢–æ—á–∫–∏ –≤—Å—Ç—Ä–µ—á–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º meeting_points
        context["meeting_points"] = tour.meeting_points.all().order_by(
            "sort_order"
        )

        # –ö–æ–¥ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        try:
            context["booking_code"] = tour.booking_code
        except:
            context["booking_code"] = None

        logger.info("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç—É—Ä–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω")
        return context


def get_similar_tours(request, tour_id):
    """AJAX –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Ö–æ–∂–∏—Ö —Ç—É—Ä–æ–≤"""
    try:
        tour = get_object_or_404(Tour, id=tour_id, status="published")
        similar_tours = tour.get_related_tours(limit=4)

        data = []
        for similar_tour in similar_tours:
            data.append(
                {
                    "id": similar_tour.id,
                    "title": similar_tour.safe_translation_getter(
                        "title", any_language=True
                    ),
                    "short_description": similar_tour.safe_translation_getter(
                        "short_description", any_language=True
                    ),
                    "price": float(similar_tour.price_adult),
                    "duration": similar_tour.get_duration_display(),
                    "rating": float(similar_tour.rating),
                    "featured_image": (
                        similar_tour.featured_image.url
                        if similar_tour.featured_image
                        else None
                    ),
                    "url": similar_tour.get_absolute_url(),
                    "location": similar_tour.location or (
                        similar_tour.category.safe_translation_getter(
                            "name", any_language=True
                        )
                        if similar_tour.category
                        else None
                    ),
                }
            )

        return JsonResponse({"tours": data})

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Ö–æ–∂–∏—Ö —Ç—É—Ä–æ–≤: {e}")
        return JsonResponse({"error": "Error loading similar tours"}, status=500)
