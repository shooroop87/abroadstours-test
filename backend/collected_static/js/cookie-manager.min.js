// Исправленная версия cookie-manager.js

(function() {
  "use strict";

  // Инициализация App если еще не существует
  window.App = window.App || {};

  // Функция показа WhatsApp кнопки
  function showWhatsAppButton() {
    console.log('Cookie Manager: Showing WhatsApp button...');
    
    // Сначала добавляем класс к body для CSS правил
    document.body.classList.add('cookie-consent-given');
    
    const whatsappButton = document.getElementById('ht-ctc-chat');
    if (whatsappButton) {
      // Показываем кнопку
      whatsappButton.style.display = 'block';
      
      // Добавляем класс для анимации появления
      setTimeout(() => {
        whatsappButton.classList.add('show');
      }, 50);
      
      console.log('WhatsApp button shown by Cookie Manager');
      
      // Если WhatsApp Manager уже загружен, используем его метод
      if (window.WhatsAppManager) {
        setTimeout(() => {
          window.WhatsAppManager.showButton();
        }, 100);
      }
    } else {
      console.warn('WhatsApp button element not found');
    }
  }

  // Функция загрузки WhatsApp скрипта с улучшенной обработкой
  function loadWhatsAppButton() {
    console.log('Cookie Manager: Loading WhatsApp script...');
    
    // Сначала показываем кнопку и добавляем класс consent
    showWhatsAppButton();
    
    // Проверяем, не загружен ли уже скрипт
    if (document.querySelector('script[src*="whatsapp.js"]')) {
      console.log('WhatsApp script already loaded');
      // Если скрипт уже загружен, просто показываем кнопку
      if (window.WhatsAppManager) {
        window.WhatsAppManager.showButton();
      }
      return Promise.resolve();
    }
    
    return new Promise((resolve, reject) => {
      try {
        const script = document.createElement('script');
        script.src = "/static/js/whatsapp.js";
        script.defer = true;
        
        script.onload = function() {
          console.log('WhatsApp script loaded successfully');
          
          // После загрузки скрипта, показываем кнопку через WhatsApp Manager
          setTimeout(() => {
            if (window.WhatsAppManager) {
              window.WhatsAppManager.showButton();
            }
          }, 200);
          
          resolve();
        };
        
        script.onerror = function() {
          console.error('Failed to load WhatsApp script');
          reject(new Error('Failed to load WhatsApp script'));
        };
        
        document.body.appendChild(script);
        
        // Таймаут на случай зависания загрузки
        setTimeout(() => {
          if (!document.querySelector('script[src*="whatsapp.js"][data-loaded="true"]')) {
            console.warn('WhatsApp script loading timeout');
          }
        }, 5000);
        
      } catch (error) {
        console.error('Error loading WhatsApp script:', error);
        reject(error);
      }
    });
  }

  // ГЛАВНАЯ ФУНКЦИЯ ИНИЦИАЛИЗАЦИИ WHATSAPP
  function initializeWhatsAppForReturningUsers() {
    const cookieConsents = getCookieConsents();
    
    if (cookieConsents.hasConsented) {
      console.log('Returning user detected - initializing WhatsApp immediately');
      document.body.classList.add('cookie-consent-given');
      
      // Загружаем WhatsApp для возвращающихся пользователей
      setTimeout(() => {
        loadWhatsAppButton()
          .then(() => {
            console.log('WhatsApp initialized successfully for returning user');
          })
          .catch(error => {
            console.error('WhatsApp initialization failed for returning user:', error);
          });
      }, 100);
    }
  }

  // Ждем загрузки DOM
  document.addEventListener('DOMContentLoaded', function() {
    const cookieBanner = document.getElementById('cookieBanner');
    const cookieConsent = document.getElementById('cookieConsent');
    const acceptCookiesBanner = document.getElementById('acceptCookiesBanner');
    const manageCookiesBanner = document.getElementById('manageCookiesBanner');
    const acceptAllCookies = document.getElementById('acceptAllCookies');
    const acceptSelectedCookies = document.getElementById('acceptSelectedCookies');
    const rejectAllCookies = document.getElementById('rejectAllCookies');
    const closeCookieModal = document.getElementById('closeCookieModal');

    // Флаг для предотвращения множественных обработок
    let isProcessing = false;
    let whatsappLoaded = false;

    // Функция безопасной загрузки WhatsApp
    function safeLoadWhatsApp(delay = 1000) {
      if (whatsappLoaded) {
        console.log('WhatsApp already loaded, skipping');
        return;
      }
      
      setTimeout(() => {
        loadWhatsAppButton()
          .then(() => {
            whatsappLoaded = true;
            console.log('WhatsApp loaded successfully');
          })
          .catch(error => {
            console.error('WhatsApp loading failed:', error);
            // Повторная попытка через 3 секунды
            setTimeout(() => {
              if (!whatsappLoaded) {
                console.log('Retrying WhatsApp load...');
                loadWhatsAppButton().then(() => {
                  whatsappLoaded = true;
                });
              }
            }, 3000);
          });
      }, delay);
    }

    // ПРОВЕРЯЕМ СУЩЕСТВУЮЩИЕ СОГЛАСИЯ ПРИ ЗАГРУЗКЕ
    const cookieConsents = getCookieConsents();
    
    if (!cookieConsents.hasConsented) {
      console.log('New user detected - showing cookie banner');
      // Показываем баннер через 2 секунды ТОЛЬКО если элементы существуют
      if (cookieBanner) {
        setTimeout(function() {
          // Двойная проверка перед показом
          if (!getCookieConsents().hasConsented) {
            cookieBanner.style.display = 'block';
            console.log('Cookie banner displayed');
          }
        }, 2000);
      }
    } else {
      console.log('Returning user detected - applying existing consents');
      // Применяем существующие согласия и скрываем элементы
      applyCookieConsents(cookieConsents);
      hideAllCookieElements();
      
      // КРИТИЧНО: Загружаем WhatsApp для возвращающихся пользователей
      safeLoadWhatsApp(300);
    }

    // Обработчики событий с улучшенной обработкой
    if (acceptCookiesBanner) {
      acceptCookiesBanner.addEventListener('click', function() {
        if (isProcessing) return;
        isProcessing = true;
        console.log('User clicked: Accept all cookies (banner)');
        
        acceptAllCookiesFunction();
        hideAllCookieElements();
        safeLoadWhatsApp(500); // Уменьшили задержку
        
        setTimeout(() => {
          isProcessing = false;
        }, 500);
      });
    }

    if (manageCookiesBanner) {
      manageCookiesBanner.addEventListener('click', function() {
        if (isProcessing) return;
        console.log('User clicked: Manage cookies');
        hideAllCookieElements();
        showModal();
      });
    }

    if (acceptAllCookies) {
      acceptAllCookies.addEventListener('click', function() {
        if (isProcessing) return;
        isProcessing = true;
        console.log('User clicked: Accept all cookies (modal)');
        
        acceptAllCookiesFunction();
        hideModal();
        safeLoadWhatsApp(500); // Уменьшили задержку
        
        setTimeout(() => {
          isProcessing = false;
        }, 500);
      });
    }

    if (acceptSelectedCookies) {
      acceptSelectedCookies.addEventListener('click', function() {
        if (isProcessing) return;
        isProcessing = true;
        console.log('User clicked: Accept selected cookies');
        
        acceptSelectedCookiesFunction();
        hideModal();
        safeLoadWhatsApp(500); // Уменьшили задержку
        
        setTimeout(() => {
          isProcessing = false;
        }, 500);
      });
    }

    if (rejectAllCookies) {
      rejectAllCookies.addEventListener('click', function() {
        if (isProcessing) return;
        isProcessing = true;
        console.log('User clicked: Reject all cookies');
        
        rejectAllCookiesFunction();
        hideModal();
        safeLoadWhatsApp(500); // Даже при отклонении показываем WhatsApp
        
        setTimeout(() => {
          isProcessing = false;
        }, 500);
      });
    }

    if (closeCookieModal) {
      closeCookieModal.addEventListener('click', function() {
        console.log('User clicked: Close modal');
        hideModal();
      });
    }

    // Close modal when clicking overlay
    if (cookieConsent) {
      cookieConsent.addEventListener('click', function(e) {
        if (e.target === cookieConsent) {
          console.log('User clicked: Modal overlay (close)');
          hideModal();
        }
      });
    }

    // Функции управления UI
    function hideAllCookieElements() {
      if (cookieBanner) cookieBanner.style.display = 'none';
      if (cookieConsent) cookieConsent.style.display = 'none';
      document.body.classList.add('cookie-consent-given');
      document.body.style.overflow = '';
      console.log('All cookie elements hidden');
    }

    function hideBanner() {
      if (cookieBanner) cookieBanner.style.display = 'none';
      document.body.classList.add('cookie-consent-given');
    }

    function showModal() {
      if (!cookieConsent) return;
      
      cookieConsent.style.display = 'flex';
      document.body.style.overflow = 'hidden';
      
      // Предзаполняем текущие настройки
      const consents = getCookieConsents();
      if (consents.hasConsented) {
        const analyticsCheckbox = document.getElementById('analytics-cookies');
        const marketingCheckbox = document.getElementById('marketing-cookies');
        const functionalCheckbox = document.getElementById('functional-cookies');
        
        if (analyticsCheckbox) analyticsCheckbox.checked = consents.analytics || false;
        if (marketingCheckbox) marketingCheckbox.checked = consents.marketing || false;
        if (functionalCheckbox) functionalCheckbox.checked = consents.functional || false;
      }
    }

    function hideModal() {
      if (cookieConsent) cookieConsent.style.display = 'none';
      document.body.style.overflow = '';
    }

    // Основные функции обработки согласий
    function acceptAllCookiesFunction() {
      const consents = {
        hasConsented: true,
        essential: true,
        analytics: true,
        marketing: true,
        functional: true,
        timestamp: new Date().toISOString(),
        version: '1.0',
        saved: true
      };
      
      console.log('Accepting all cookies:', consents);
      
      saveCookieConsents(consents);
      
      setTimeout(() => {
        applyCookieConsents(consents);
      }, 100);
      
      setTimeout(() => {
        sendAnalyticsEvent('accept_all');
      }, 500);
    }

    function acceptSelectedCookiesFunction() {
      const analyticsCheckbox = document.getElementById('analytics-cookies');
      const marketingCheckbox = document.getElementById('marketing-cookies');
      const functionalCheckbox = document.getElementById('functional-cookies');
      
      const consents = {
        hasConsented: true,
        essential: true,
        analytics: analyticsCheckbox ? analyticsCheckbox.checked : false,
        marketing: marketingCheckbox ? marketingCheckbox.checked : false,
        functional: functionalCheckbox ? functionalCheckbox.checked : false,
        timestamp: new Date().toISOString(),
        version: '1.0',
        saved: true
      };
      
      console.log('Accepting selected cookies:', consents);
      
      saveCookieConsents(consents);
      
      setTimeout(() => {
        applyCookieConsents(consents);
      }, 100);
      
      setTimeout(() => {
        sendAnalyticsEvent('accept_selected');
      }, 500);
    }

    function rejectAllCookiesFunction() {
      const consents = {
        hasConsented: true,
        essential: true,
        analytics: false,
        marketing: false,
        functional: false,
        timestamp: new Date().toISOString(),
        version: '1.0',
        saved: true
      };
      
      console.log('Rejecting all non-essential cookies:', consents);
      
      saveCookieConsents(consents);
      applyCookieConsents(consents);
      clearNonEssentialCookies();

      setTimeout(() => {
        sendAnalyticsEvent('reject_all');
      }, 500);
    }

    // Функции работы с localStorage и cookies
    function getCookieConsents() {
      try {
        const stored = localStorage.getItem('cookieConsents');
        if (stored) {
          const parsed = JSON.parse(stored);
          if (parsed.hasConsented !== undefined && parsed.saved) {
            console.log('Retrieved cookie consents:', parsed);
            return parsed;
          }
        }
      } catch (e) {
        console.error('Error parsing cookie consents:', e);
        localStorage.removeItem('cookieConsents');
      }
      
      console.log('No valid cookie consents found');
      return { hasConsented: false };
    }

    function saveCookieConsents(consents) {
      try {
        localStorage.setItem('cookieConsents', JSON.stringify(consents));
        
        const cookieValue = encodeURIComponent(JSON.stringify({
          hasConsented: consents.hasConsented,
          timestamp: consents.timestamp,
          version: consents.version
        }));
        
        document.cookie = `cookieConsent=${cookieValue}; path=/; max-age=31536000; SameSite=Lax;`;
        
        console.log('Cookie consents saved successfully:', consents);
      } catch (error) {
        console.error('Error saving cookie consents:', error);
      }
    }

    function applyCookieConsents(consents) {
      console.log('Applying cookie consents:', consents);
      
      if (consents.analytics) {
        loadAnalytics();
      }
      
      if (consents.marketing) {
        loadMarketing();
      }
      
      if (consents.functional) {
        loadFunctional();
      }
    }

    // Функции загрузки внешних скриптов
    function loadAnalytics() {
      console.log('Loading analytics scripts...');
      
      // Google Tag Manager
      if (typeof window.dataLayer === 'undefined') {
        console.log('Initializing Google Tag Manager...');
        
        window.dataLayer = window.dataLayer || [];
        const GTM_ID = 'GTM-K4RDCK5D';
        
        window.dataLayer.push({
          'gtm.start': new Date().getTime(),
          'event': 'gtm.js'
        });
        
        const gtmScript = document.createElement('script');
        gtmScript.async = true;
        gtmScript.src = `https://www.googletagmanager.com/gtm.js?id=${GTM_ID}`;
        gtmScript.onload = function() {
          console.log('Google Tag Manager script loaded successfully');
          
          window.dataLayer.push({
            'event': 'cookie_consent_granted',
            'cookie_consent_analytics': true,
            'timestamp': new Date().toISOString()
          });
        };
        gtmScript.onerror = function() {
          console.error('Failed to load Google Tag Manager script');
        };
        
        document.head.appendChild(gtmScript);
        
        if (!document.querySelector('noscript iframe[src*="googletagmanager.com"]')) {
          const noscript = document.createElement('noscript');
          noscript.innerHTML = `<iframe src="https://www.googletagmanager.com/ns.html?id=${GTM_ID}" height="0" width="0" style="display:none;visibility:hidden"></iframe>`;
          document.head.appendChild(noscript);
        }
      } else {
        console.log('Google Tag Manager already initialized');
        
        window.dataLayer.push({
          'event': 'cookie_consent_granted',
          'cookie_consent_analytics': true,
          'timestamp': new Date().toISOString()
        });
      }
      
      // Yandex Metrica
      if (typeof ym === 'undefined') {
        const YANDEX_ID = 103141713;
        
        (function(m,e,t,r,i,k,a){
          m[i]=m[i]||function(){(m[i].a=m[i].a||[]).push(arguments)};
          m[i].l=1*new Date();
          
          for (var j = 0; j < document.scripts.length; j++) {
            if (document.scripts[j].src === r) { 
              console.log('Yandex Metrica script already loaded');
              return; 
            }
          }
          k=e.createElement(t);
          a=e.getElementsByTagName(t)[0];
          k.async=1;
          k.src=r;
          k.onload = function() {
            console.log('Yandex Metrica script loaded successfully');
          };
          k.onerror = function() {
            console.error('Failed to load Yandex Metrica script');
          };
          a.parentNode.insertBefore(k,a);
        })(window, document, "script", "https://mc.yandex.ru/metrika/tag.js", "ym");
        
        setTimeout(function() {
          if (typeof ym !== 'undefined') {
            ym(YANDEX_ID, "init", {
              clickmap: true,
              trackLinks: true,
              accurateTrackBounce: true,
              webvisor: true
            });
            console.log('Yandex Metrica initialized with ID:', YANDEX_ID);
          } else {
            console.warn('Yandex Metrica not available after timeout');
          }
        }, 500);
        
        if (!document.querySelector('noscript img[src*="mc.yandex.ru"]')) {
          const noscript = document.createElement('noscript');
          noscript.innerHTML = `<div><img src="https://mc.yandex.ru/watch/${YANDEX_ID}" style="position:absolute; left:-9999px;" alt="" /></div>`;
          document.head.appendChild(noscript);
        }
      } else {
        console.log('Yandex Metrica already initialized');
      }
    }

    function loadMarketing() {
      console.log('Marketing cookies enabled');
      
      if (typeof window.dataLayer !== 'undefined') {
        window.dataLayer.push({
          'event': 'cookie_consent_marketing',
          'cookie_consent_marketing': true,
          'timestamp': new Date().toISOString()
        });
      }
    }

    function loadFunctional() {
      console.log('Functional cookies enabled');
      
      if (typeof window.dataLayer !== 'undefined') {
        window.dataLayer.push({
          'event': 'cookie_consent_functional',
          'cookie_consent_functional': true,
          'timestamp': new Date().toISOString()
        });
      }
    }

    function clearNonEssentialCookies() {
      console.log('Clearing non-essential cookies...');
      
      const cookiesToClear = [
        '_ga', '_gid', '_gat', '_gat_gtag', 
        '_fbp', '_fbc', 
        '__utma', '__utmb', '__utmc', '__utmt', '__utmz',
        'ym_d', 'ym_isad', 'ym_uid', '_ym_uid', '_ym_d', '_ym_isad'
      ];
      
      cookiesToClear.forEach(function(cookieName) {
        document.cookie = `${cookieName}=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;`;
        document.cookie = `${cookieName}=; Path=/; Domain=${window.location.hostname}; Expires=Thu, 01 Jan 1970 00:00:01 GMT;`;
        const parts = window.location.hostname.split('.');
        if (parts.length > 2) {
          const parentDomain = '.' + parts.slice(-2).join('.');
          document.cookie = `${cookieName}=; Path=/; Domain=${parentDomain}; Expires=Thu, 01 Jan 1970 00:00:01 GMT;`;
        }
      });
    }

    function sendAnalyticsEvent(action) {
      const consents = getCookieConsents();
      
      if (consents.analytics) {
        if (typeof window.dataLayer !== 'undefined') {
          try {
            window.dataLayer.push({
              'event': 'cookie_consent_action',
              'cookie_action': action,
              'timestamp': new Date().toISOString()
            });
            console.log('Google Tag Manager event sent:', action);
          } catch (e) {
            console.error('Failed to send Google Tag Manager event:', e);
          }
        }
        
        if (typeof ym !== 'undefined') {
          try {
            ym(103141713, 'reachGoal', 'cookie_consent', {
              action: action,
              timestamp: new Date().toISOString()
            });
            console.log('Yandex Metrica event sent:', action);
          } catch (e) {
            console.error('Failed to send Yandex Metrica event:', e);
          }
        }
      }
    }

    // Глобальные функции для внешнего использования
    App.CookieManager = {
      showSettings: function() {
        showModal();
      },
      
      updateConsents: function(newConsents) {
        const currentConsents = getCookieConsents();
        const updatedConsents = {
          ...currentConsents,
          ...newConsents,
          timestamp: new Date().toISOString()
        };
        
        saveCookieConsents(updatedConsents);
        applyCookieConsents(updatedConsents);
        
        console.log('Cookie consents updated:', updatedConsents);
      },
      
      getCurrentConsents: function() {
        return getCookieConsents();
      },
      
      loadWhatsApp: function() {
        safeLoadWhatsApp(0);
      },
      
      debug: function() {
        console.log('=== COOKIE MANAGER DEBUG ===');
        console.log('Current consents:', getCookieConsents());
        console.log('All cookies:', document.cookie);
        console.log('localStorage:', localStorage.getItem('cookieConsents'));
        console.log('Yandex Metrica available:', typeof ym !== 'undefined');
        console.log('Google Tag Manager available:', typeof window.dataLayer !== 'undefined');
        console.log('DataLayer contents:', window.dataLayer);
        console.log('WhatsApp script loaded:', !!document.querySelector('script[src*="whatsapp.js"]'));
        console.log('WhatsApp loaded flag:', whatsappLoaded);
        console.log('Cookie elements present:', {
          banner: !!cookieBanner,
          modal: !!cookieConsent,
          acceptBanner: !!acceptCookiesBanner,
          manageBanner: !!manageCookiesBanner
        });
        console.log('Body classes:', document.body.className);
        console.log('=== END DEBUG ===');
      }
    };

    // Глобальные функции для обратной совместимости
    window.showCookieSettings = App.CookieManager.showSettings;
    window.updateCookieConsents = App.CookieManager.updateConsents;
    window.getCurrentCookieConsents = App.CookieManager.getCurrentConsents;
    window.loadWhatsAppButton = App.CookieManager.loadWhatsApp;
    window.debugCookies = App.CookieManager.debug;

    // ВАЖНО: Проверяем согласия даже если cookie элементов нет на странице
    if (!cookieBanner && !cookieConsent) {
      console.warn('Cookie elements not found on this page, but checking consents anyway');
      initializeWhatsAppForReturningUsers();
    }
  });

  // ДОПОЛНИТЕЛЬНАЯ ПРОВЕРКА для случаев когда DOM уже загружен
  if (document.readyState === 'loading') {
    // DOM еще загружается, обработчик выше сработает
  } else {
    // DOM уже загружен, выполняем инициализацию сразу
    console.log('DOM already loaded, initializing WhatsApp for returning users immediately');
    setTimeout(() => {
      initializeWhatsAppForReturningUsers();
    }, 100);
  }

})();